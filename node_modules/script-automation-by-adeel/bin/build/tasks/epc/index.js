var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import chalk from "chalk";
import fs from "fs";
import { dirname, join } from "path";
import { AppendLineToFile, RemoveQuotes } from "./utils/index.js";
// var path = require("path");
const EpcIpListComparionWithCurrentUGWConfigurations = (ugwFilePath) => {
    // console.log(" from inner function ugwFilePath", ugwFilePath)
    // const filePathUGW1 = path.resolve(ugwFilePath.ugwConfig)
    const currentPath = dirname(process.argv[1]);
    const ipsFoundInUgwConfig = join(currentPath, 'ipsFoundInUgwConfig.txt');
    const ipsNOTFOUNDInUgwConfig = join(currentPath, 'ipsNOTFOUNDInUgwConfig.txt');
    const ugwFilePathFinal = RemoveQuotes(ugwFilePath.ugwConfig);
    const cdnIpListFinal = RemoveQuotes(ugwFilePath.cdnIpList);
    const readUgwFile = fs.readFileSync(ugwFilePathFinal, "utf8");
    const readCdnIpList = fs.readFileSync(cdnIpListFinal, "utf8");
    let ugwConfigFileArr = readUgwFile.split(/\r?\n/);
    const ipRegex = /\b(?:\d{1,3}\.){3}\d{1,3}\b/g;
    var filteredIps = readCdnIpList.match(ipRegex);
    // console.log("filtered",filteredIps);
    let matchedIpArry = [];
    filteredIps === null || filteredIps === void 0 ? void 0 : filteredIps.map((ip) => {
        ugwConfigFileArr.forEach((line, idx) => __awaiter(void 0, void 0, void 0, function* () {
            if (line.includes(ip)) {
                console.log((idx + 1) + ':' + line);
                let lineMatched = (idx + 1) + ':' + line;
                AppendLineToFile(ipsFoundInUgwConfig, lineMatched);
                // let alreadyAvailableIp =  matchedIpArry.filter(oldIP => oldIP == ip)
                if (!matchedIpArry.includes(ip)) {
                    matchedIpArry.push(ip);
                }
            }
        }));
    });
    var ipsNotFound = filteredIps === null || filteredIps === void 0 ? void 0 : filteredIps.filter((x) => !matchedIpArry.includes(x));
    console.log("ipsNotFound", ipsNotFound);
    AppendLineToFile(ipsNOTFOUNDInUgwConfig, ipsNotFound);
    console.log("Filtered IP list", filteredIps === null || filteredIps === void 0 ? void 0 : filteredIps.includes("119.160.60.160"));
    console.log("Matche IP list", matchedIpArry.includes("119.160.60.160"));
    console.log(chalk.red('Output saved to file:', ipsFoundInUgwConfig));
    console.log(chalk.red('Output saved to file:', ipsNOTFOUNDInUgwConfig));
    // console.log("current dir name", process.argv[1])
};
export default EpcIpListComparionWithCurrentUGWConfigurations;
